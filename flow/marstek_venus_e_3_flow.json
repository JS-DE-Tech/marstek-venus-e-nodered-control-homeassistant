[
  {
    "id": "72d2ab39d59acc33",
    "type": "comment",
    "z": "2323a58d30747a1f",
    "name": "Marstek Venus E",
    "info": "",
    "x": 280,
    "y": 120,
    "wires": []
  },
  {
    "id": "3d1a5000f7db570c",
    "type": "comment",
    "z": "2323a58d30747a1f",
    "name": "Marstek Venus E - Winterbetrieb",
    "info": "‚ùÑÔ∏è Winterbetrieb-Logik\n\nAktiviert per Switch ‚ÄûWinterbetrieb‚Äú in HA.\nüîã Laden:\nWenn\n- Shelly ‚Üí total_act_power ‚â§ ‚Äì200 W (Einspeisung)\n- l√§nger als 60 s\n  ‚û° Modus = Auto\n  ‚Üí Akku l√§dt automatisch.\n\nüõë Stoppen:\nWenn\n- VenusE ‚Üí ongrid_power > 0 (Netzbezug)\n- l√§nger als 30 s\n- und SoC ‚â§ 50 %\n  ‚û° Modus = Passive\n  ‚Üí Akku entl√§dt nicht mehr.\n\n(Optional: bei SoC ‚â• 80 % ebenfalls Passive, wenn aktiviert.)\nüè† Home Assistant\n- Schalter: ‚ÄûWinterbetrieb‚Äú (unter Marstek VenusE 3.0)\n- Sensoren: SoC, Netzleistung, Status etc.\n- MQTT-Topics: marstek/venus_e/... & marstek/winter/...\n\nüí° Ergebnis:\nIm Winter l√§dt der Akku nur bei √úberschuss und bleibt bei Netzbezug oder niedrigem SoC passiv ‚Äì vollautomatisch, gesteuert √ºber einen einzigen Schalter.",
    "x": 330,
    "y": 980,
    "wires": []
  },
  {
    "id": "b7dae8021f2f4c5e",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "Poll every 2s",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "2",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 320,
    "y": 1060,
    "wires": [["58e6dd86ea6ae62c"]]
  },
  {
    "id": "58e6dd86ea6ae62c",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Build UDP queries (IDs fixed)",
    "func": "const reqs = [\n  { id:100, method:\"Marstek.GetDevice\", params:{ ble_mac:\"0\" } },\n  { id:101, method:\"Wifi.GetStatus\",    params:{ id:0 } },\n  { id:102, method:\"BLE.GetStatus\",     params:{ id:0 } },\n  { id:103, method:\"Bat.GetStatus\",     params:{ id:0 } },\n  { id:104, method:\"ES.GetMode\",        params:{ id:0 } },\n  { id:105, method:\"EM.GetStatus\",      params:{ id:0 } }\n];\nlet out=[];\nfor(const r of reqs){\n  out.push({ payload: Buffer.from(JSON.stringify({id:r.id,method:r.method,params:r.params}),'utf8'), topic:r.method });\n}\nreturn [out];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1400,
    "y": 1060,
    "wires": [["440e29182b3a25eb"]]
  },
  {
    "id": "0cadd4b9b7427cdf",
    "type": "udp in",
    "z": "2323a58d30747a1f",
    "name": "UDP ‚Üê VenusE (local:30000)",
    "iface": "",
    "port": "30000",
    "ipv": "udp4",
    "multicast": "false",
    "group": "",
    "datatype": "buffer",
    "x": 360,
    "y": 200,
    "wires": [["522a6073a4de3aa9"]]
  },
  {
    "id": "413441b26fcbd76b",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Parse reply + MQTT Discovery/States (marstek/venus_e)",
    "func": "const discoBase = 'homeassistant';\nconst devId     = 'marstek_venus_e_v3_UDP';\nconst devName   = 'Marstek VenusE 3.0';\nconst manu      = 'Marstek';\nconst model     = 'VenusE 3.0';\nconst statBase  = 'marstek/venus_e/stat';\nconst cmndBase  = 'marstek/venus_e/cmnd';\nfunction T(leaf){ return `${statBase}/${leaf}`; }\nfunction pub(leaf, val){\n    return { topic: T(leaf), payload: String(val) };\n}\nif (msg && msg.topic === '__discovery__') {\n    const d = [];\n    const deviceInfo = {\n        identifiers: [devId],\n        manufacturer: manu,\n        model,\n        name: devName\n    };\n    const add = (t,p) => d.push({\n        topic: t,\n        payload: JSON.stringify(p),\n        retain: true\n    });\n    const S = (oid, name, leaf, unit) => add(\n        `${discoBase}/sensor/${oid}/config`,\n        {\n            name,\n            unique_id: oid,\n            state_topic: `${statBase}/${leaf}`,\n            unit_of_measurement: unit,\n            device: deviceInfo\n        }\n    );\n    const SEL = (oid, name, opts, cmdLeaf, stateLeaf) => add(\n        `${discoBase}/select/${oid}/config`,\n        {\n            name,\n            unique_id: oid,\n            command_topic: `${cmndBase}/${cmdLeaf}`,\n            state_topic: `${statBase}/${stateLeaf}`,\n            options: opts,\n            device: deviceInfo\n        }\n    );\n    S('marstek_venus_device',         'Ger√§t/Modell',            'device');\n    S('marstek_venus_fw_ver',         'Firmware Version',        'fw_ver');\n    S('marstek_venus_ble_mac',        'BLE MAC',                 'ble_mac');\n    S('marstek_venus_wifi_mac',       'WLAN MAC',                'wifi_mac');\n    S('marstek_venus_wifi_ssid',      'WLAN SSID',               'wifi_ssid');\n    S('marstek_venus_wifi_rssi',      'WLAN RSSI',               'wifi_rssi', 'dBm');\n    S('marstek_venus_ble_state',      'BLE Status',              'ble_state');\n    S('marstek_venus_bat_soc',        'Batterie SoC',            'bat_soc', '%');\n    S('marstek_venus_bat_temp_c',     'Batterie Temperatur',     'bat_temp_c', '¬∞C');\n    S('marstek_venus_bat_capacity',   'Verbleibende Kapazit√§t',  'bat_capacity', 'Wh');\n    S('marstek_venus_rated_capacity', 'Nennkapazit√§t',           'rated_capacity', 'Wh');\n    S('marstek_venus_charg_flag',     'Charging erlaubt',        'charg_flag');\n    S('marstek_venus_dischrg_flag',   'Discharge erlaubt',       'dischrg_flag');\n    S('marstek_venus_mode',           'Modus',                   'mode');\n    S('marstek_venus_ongrid_power',   'Netzleistung',            'ongrid_power', 'W');\n    S('marstek_venus_offgrid_power',  'Offgrid-Leistung',        'offgrid_power', 'W');\n    S('marstek_venus_es_bat_soc',     'Batterie SoC (ES)',       'es_bat_soc', '%');\n    S('marstek_venus_total_power',    'Gesamtleistung',          'total_power', 'W');\n    S('marstek_venus_em_ct_state',    'CT Status (EM)',          'em_ct_state');\n    S('marstek_venus_em_a_power',     'EM Phase A',              'em_a_power', 'W');\n    S('marstek_venus_em_b_power',     'EM Phase B',              'em_b_power', 'W');\n    S('marstek_venus_em_c_power',     'EM Phase C',              'em_c_power', 'W');\n    S('marstek_venus_em_total_power', 'EM Gesamtleistung',       'em_total_power', 'W');\n    SEL(\n        'marstek_venus_mode_select',\n        'Betriebsmodus',\n        ['Auto','AI','Manual','Passive'],\n        'mode',\n        'mode'\n    );\n    add(\n        `${discoBase}/switch/marstek_venus_winter_mode_switch/config`,\n        {\n            name: 'Winterbetrieb',\n            unique_id: 'marstek_venus_winter_mode_switch',\n            command_topic: 'marstek/winter/cmnd/winter_mode',\n            payload_on: 'ON',\n            payload_off: 'OFF',\n            state_topic: 'marstek/winter/stat/winter_mode',\n            state_on: 'ON',\n            state_off: 'OFF',\n            icon: 'mdi:snowflake',\n            device: deviceInfo\n        }\n    );\n    add(\n        `${discoBase}/switch/marstek_venus_storage_switch/config`,\n        {\n            name: 'Lagerungsbetrieb',\n            unique_id: 'marstek_venus_storage_switch',\n            command_topic: 'marstek/storage/cmnd/enable',\n            payload_on: 'ON',\n            payload_off: 'OFF',\n            state_topic: 'marstek/storage/stat/enable',\n            state_on: 'ON',\n            state_off: 'OFF',\n            icon: 'mdi:battery-clock',\n            device: deviceInfo\n        }\n    );\n    return [ null, d, null ];\n}\nlet txt;\ntry {\n    txt = msg.payload.toString('utf8');\n} catch(e) {\n    return null;\n}\nlet js;\ntry {\n    js = JSON.parse(txt);\n} catch(e) {\n    node.warn('JSON parse error: ' + e);\n    return null;\n}\nif (!js || (!js.result && !js.error)) {\n    return null;\n}\nconst out = [];\nif (js.result) {\n    if (js.id === 100) {\n        if (js.result.device      !== undefined) out.push(pub('device',        js.result.device));\n        if (js.result.ver         !== undefined) out.push(pub('fw_ver',        js.result.ver));\n        if (js.result.ble_mac     !== undefined) out.push(pub('ble_mac',       js.result.ble_mac));\n        if (js.result.wifi_mac    !== undefined) out.push(pub('wifi_mac',      js.result.wifi_mac));\n        if (js.result.wifi_name   !== undefined) out.push(pub('wifi_ssid',     js.result.wifi_name));\n    }\n    if (js.id === 101) {\n        if (js.result.ssid        !== undefined) out.push(pub('wifi_ssid',     js.result.ssid));\n        if (js.result.rssi        !== undefined) out.push(pub('wifi_rssi',     js.result.rssi));\n    }\n    if (js.id === 102) {\n        if (js.result.state       !== undefined) out.push(pub('ble_state',     js.result.state));\n        if (js.result.ble_mac     !== undefined) out.push(pub('ble_mac',       js.result.ble_mac));\n    }\n    if (js.id === 103) {\n        const soc = js.result.soc;\n        const tr  = js.result.bat_temp;\n        let tc;\n        if (typeof tr === 'number') {\n            tc = Math.round((tr / 10) * 10) / 10;\n        }\n        if (soc                          !== undefined) out.push(pub('bat_soc',        soc));\n        if (tc                           !== undefined) out.push(pub('bat_temp_c',     tc));\n        if (js.result.bat_capacity       !== undefined) out.push(pub('bat_capacity',   js.result.bat_capacity));\n        if (js.result.rated_capacity     !== undefined) out.push(pub('rated_capacity', js.result.rated_capacity));\n        if (js.result.charg_flag         !== undefined) out.push(pub('charg_flag',     js.result.charg_flag));\n        if (js.result.dischrg_flag       !== undefined) out.push(pub('dischrg_flag',   js.result.dischrg_flag));\n    }\n    if (js.id === 104) {\n        if (js.result.mode              !== undefined) out.push(pub('mode',            js.result.mode));\n        if (js.result.ongrid_power      !== undefined) out.push(pub('ongrid_power',    js.result.ongrid_power));\n        if (js.result.offgrid_power     !== undefined) out.push(pub('offgrid_power',   js.result.offgrid_power));\n        if (js.result.bat_soc           !== undefined) out.push(pub('es_bat_soc',      js.result.bat_soc));\n        if (js.result.total_power       !== undefined) out.push(pub('total_power',     js.result.total_power));\n    }\n    if (js.id === 105) {\n        if (js.result.ct_state    !== undefined) out.push(pub('em_ct_state',   js.result.ct_state));\n        if (js.result.a_power     !== undefined) out.push(pub('em_a_power',    js.result.a_power));\n        if (js.result.b_power     !== undefined) out.push(pub('em_b_power',    js.result.b_power));\n        if (js.result.c_power     !== undefined) out.push(pub('em_c_power',    js.result.c_power));\n        if (js.result.total_power !== undefined) out.push(pub('em_total_power',js.result.total_power));\n    }\n}\nreturn [ null, null, out ];",
    "outputs": 3,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1030,
    "y": 420,
    "wires": [
      ["82cd8fd8b98bb7dd"],
      ["eb14eb2e1b2fc555"],
      ["eb14eb2e1b2fc555"]
    ]
  },
  {
    "id": "9187f6c6f251cb91",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "Publish MQTT Discovery (once)",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.2,
    "topic": "__discovery__",
    "payload": "",
    "payloadType": "date",
    "x": 370,
    "y": 420,
    "wires": [["413441b26fcbd76b"]]
  },
  {
    "id": "3f7ee0de103d2d23",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "cmd: Winterbetrieb",
    "topic": "marstek/winter/cmnd/winter_mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "inputs": 0,
    "x": 330,
    "y": 1180,
    "wires": [["f31bff547abeb9e3"]]
  },
  {
    "id": "f31bff547abeb9e3",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Switch ‚Üí flow.winter_enabled + echo",
    "func": "const v = String(msg.payload||'').trim().toUpperCase();\nconst on = (v==='ON'||v==='1'||v==='TRUE');\nflow.set('winter_enabled', on);\nnode.send({ topic:'marstek/winter/stat/trace', payload:`WINTER set to ${on?'ON':'OFF'}` });\nreturn { topic:'marstek/winter/stat/winter_mode', payload: on?'ON':'OFF' };",
    "outputs": 1,
    "x": 770,
    "y": 1180,
    "wires": [["bcedb2ae17cb9b1a", "f436f22a608a5dce"]]
  },
  {
    "id": "0863c0f72952e2fe",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "Shelly: Netz Total Active Power",
    "topic": "shellypro3em-sab7-netz/status/em:0",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "inputs": 0,
    "x": 370,
    "y": 1240,
    "wires": [["744d0157cff4bc96"]]
  },
  {
    "id": "744d0157cff4bc96",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "parse Shelly ‚Üí src=surplus",
    "func": "let js;\ntry{\n  js = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n}catch(e){ return null; }\nif(!js || typeof js.total_act_power === 'undefined') return null;\nconst val = Number(js.total_act_power);\nif (isNaN(val)) return null;\nmsg.src = 'surplus';\nmsg.val = val;\nreturn msg;",
    "outputs": 1,
    "x": 740,
    "y": 1240,
    "wires": [["bcedb2ae17cb9b1a"]]
  },
  {
    "id": "86419fe00589f5c1",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "Venus: SoC (stat/es_bat_soc)",
    "topic": "marstek/venus_e/stat/es_bat_soc",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "inputs": 0,
    "x": 360,
    "y": 1360,
    "wires": [["2390873a5616ac49"]]
  },
  {
    "id": "68c06dd8fefd2e68",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "Venus: Netzleistung (stat/ongrid_power)",
    "topic": "marstek/venus_e/stat/ongrid_power",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "inputs": 0,
    "x": 390,
    "y": 1420,
    "wires": [["e94572df3cac2150"]]
  },
  {
    "id": "bcedb2ae17cb9b1a",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "WINTER Controller (Shelly‚ÜíAuto, ongrid‚ÜíPassive)",
    "func": "const LOG_TOPIC = 'marstek/winter/stat/log';\nconst LOG_HISTORY_TOPIC = LOG_TOPIC + '/history';\nconst SURPLUS_START_W   = -200;\nconst SURPLUS_FOR_MS    = 30000;\nconst VGRID_STOP_W      = 100;\nconst STOP_FOR_MS       = 30000;\nconst STOP_FAST_MS      = 5000;\nconst MIN_SOC           = 50;\nconst FAST_SOC_LIMIT    = 41;\nconst PASSIVE_COOLDOWN_MS = 60000;\nfunction pushLog(mqttArr, fileArr, logsArr, line) {\n    const entry = `[${new Date().toISOString()}] ${line}`;\n    logsArr.push(entry);\n    mqttArr.push({ topic: LOG_TOPIC, payload: entry });\n    fileArr.push({ payload: entry });\n}\nconst enabled       = flow.get('winter_enabled') || false;\nconst storageActive = flow.get('storage_active') || false;\nlet soc       = flow.get('soc');\nlet surplus   = flow.get('surplus');\nlet vgrid     = flow.get('vgrid');\nlet tStart    = flow.get('tStart');\nlet tStop     = flow.get('tStop');\nlet muteUntil = flow.get('mute_until') || 0;\nif (msg.src === 'soc')        { soc     = Number(msg.val); flow.set('soc', soc); }\nif (msg.src === 'surplus')    { surplus = Number(msg.val); flow.set('surplus', surplus); }\nif (msg.src === 'venus_grid') { vgrid   = Number(msg.val); flow.set('vgrid', vgrid); }\nconst now      = Date.now();\nconst mqttOut  = [];\nconst fileOut  = [];\nconst logsBuf  = [];\nif (storageActive) {\n    flow.set('tStart', null);\n    flow.set('tStop',  null);\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: `[PAUSE wg. Lagerung] soc=${soc ?? '‚Äî'} | vgrid=${vgrid ?? '‚Äî'}`\n    });\n    return null;\n}\nnode.status({\n    fill: enabled ? 'green' : 'grey',\n    shape: 'dot',\n    text: `[WINTER=${enabled ? 'ON' : 'OFF'}] soc=${soc ?? '‚Äî'} | vgrid=${vgrid ?? '‚Äî'} | surplus=${surplus ?? '‚Äî'}`\n});\nif (!enabled) {\n    flow.set('tStart', null);\n    flow.set('tStop',  null);\n    return null;\n}\nif (typeof vgrid === 'number' && typeof soc === 'number' && soc <= MIN_SOC) {\n    if (vgrid >= VGRID_STOP_W) {\n        if (!tStop) { tStop = now; flow.set('tStop', tStop); }\n        const stopDelay = (soc < FAST_SOC_LIMIT) ? STOP_FAST_MS : STOP_FOR_MS;\n        const dt = now - tStop;\n        node.status({\n            fill: 'yellow',\n            shape: 'dot',\n            text: `[STOPCHK] ongrid=${Math.round(vgrid)}W SoC=${soc}% ${(dt / 1000).toFixed(1)}/${stopDelay / 1000}s`\n        });\n        if (dt >= stopDelay) {\n            pushLog(mqttOut, fileOut, logsBuf, `WINTER ‚Üí PASSIVE (ongrid=${Math.round(vgrid)}W, SoC=${soc}%)`);\n            mqttOut.push({ topic: 'marstek/venus_e/cmnd/mode', payload: 'Passive' });\n            flow.set('mute_until', now + PASSIVE_COOLDOWN_MS);\n            flow.set('tStart', null);\n            flow.set('tStop',  null);\n            node.status({ fill: 'red', shape: 'ring', text: `PASSIVE sent (${Math.round(vgrid)}W)` });\n        }\n    } else { flow.set('tStop', null); tStop = null; }\n} else { flow.set('tStop', null); tStop = null; }\nconst mayStartAuto = (typeof vgrid !== 'number') ? true : (vgrid <= 0);\nif (typeof surplus === 'number' && mayStartAuto) {\n    if (now >= muteUntil) {\n        if (surplus <= SURPLUS_START_W) {\n            if (!tStart) { tStart = now; flow.set('tStart', tStart); }\n            const dt = now - tStart;\n            node.status({\n                fill: 'green',\n                shape: 'dot',\n                text: `[AUTOCHK] surplus=${Math.round(surplus)}W ${(dt / 1000).toFixed(1)}/${SURPLUS_FOR_MS / 1000}s`\n            });\n            if (dt >= SURPLUS_FOR_MS) {\n                pushLog(mqttOut, fileOut, logsBuf, `WINTER ‚Üí AUTO (Einspeisung=${Math.round(surplus)}W)`);\n                mqttOut.push({ topic: 'marstek/venus_e/cmnd/mode', payload: 'Auto' });\n                flow.set('tStop',  null);\n                flow.set('tStart', null);\n                node.status({ fill: 'green', shape: 'ring', text: 'AUTO sent' });\n            }\n        } else { flow.set('tStart', null); tStart = null; }\n    } else {\n        node.status({\n            fill: 'grey',\n            shape: 'dot',\n            text: `[MUTE] AUTO blockiert noch ${((muteUntil - now) / 1000).toFixed(0)}s`\n        });\n        flow.set('tStart', null);\n        tStart = null;\n    }\n} else { flow.set('tStart', null); tStart = null; }\nif (logsBuf.length) {\n    const stored = flow.get('winter_log') || [];\n    for (const line of logsBuf) stored.push(line);\n    while (stored.length > 20) stored.shift();\n    flow.set('winter_log', stored);\n    mqttOut.push({\n        topic: LOG_HISTORY_TOPIC,\n        payload: JSON.stringify(stored, null, 2)\n    });\n}\nif (mqttOut.length || fileOut.length) return [mqttOut, fileOut];\nreturn null;",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 1240,
    "wires": [["f436f22a608a5dce"], ["2a278b0892f5d734"]]
  },
  {
    "id": "f436f22a608a5dce",
    "type": "mqtt out",
    "z": "2323a58d30747a1f",
    "name": "MQTT publish",
    "topic": "",
    "qos": "",
    "retain": "",
    "broker": "22f544be.780a3c",
    "x": 1820,
    "y": 1180,
    "wires": []
  },
  {
    "id": "9c6da8e4d3b7610b",
    "type": "debug",
    "z": "2323a58d30747a1f",
    "name": "DBG ongrid payload",
    "active": false,
    "tosidebar": false,
    "console": false,
    "tostatus": true,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "payload",
    "statusType": "auto",
    "x": 1840,
    "y": 1420,
    "wires": []
  },
  {
    "id": "aa34bf1563b9ddf0",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "cmd: mode select (optional)",
    "topic": "marstek/venus_e/cmnd/mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "inputs": 0,
    "x": 360,
    "y": 1120,
    "wires": [["0882890d778460f9"]]
  },
  {
    "id": "0882890d778460f9",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "ES.SetMode (UDP) + optimistic state",
    "func": "let raw = String(msg.payload ?? \"\").trim();\nconst up = raw.toUpperCase();\nif (up === \"ON\" || up === \"AUTO\") {\n    raw = \"Auto\";\n} else if (up === \"OFF\" || up === \"PASSIVE\" || up === \"STANDBY\") {\n    raw = \"Passive\";\n}\nconst mode = raw;\nfunction build(m) {\n    if (m === \"Auto\") {\n        return {\n            id: 310,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"Auto\",\n                    auto_cfg: { enable: 1 }\n                }\n            }\n        };\n    }\n    if (m === \"AI\") {\n        return {\n            id: 311,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"AI\",\n                    ai_cfg: { enable: 1 }\n                }\n            }\n        };\n    }\n    if (m === \"Manual\") {\n        return {\n            id: 312,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"Manual\",\n                    manual_cfg: {\n                        time_num: 1,\n                        start_time: \"00:00\",\n                        end_time: \"23:59\",\n                        week_set: 127,\n                        power: -500,\n                        enable: 1\n                    }\n                }\n            }\n        };\n    }\n    return {\n        id: 313,\n        method: \"ES.SetMode\",\n        params: {\n            id: 0,\n            config: {\n                mode: \"Passive\",\n                passive_cfg: {\n                    power: 0,\n                    cd_time: 300\n                }\n            }\n        }\n    };\n}\nconst cmd = build(mode);\nconst out1 = {\n    payload: Buffer.from(JSON.stringify(cmd), \"utf8\")\n};\nconst mqtt = [\n    {\n        topic: \"marstek/venus_e/stat/mode\",\n        payload: mode\n    }\n];\nsetTimeout(() => {\n    const getCmd = {\n        id: 320,\n        method: \"ES.GetMode\",\n        params: { id: 0 }\n    };\n    node.send([\n        [{ payload: Buffer.from(JSON.stringify(getCmd), \"utf8\") }],\n        null\n    ]);\n}, 400);\nnode.send([\n    [out1],\n    null\n]);\nnode.send([\n    null,\n    mqtt\n]);\nreturn null;",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1370,
    "y": 1120,
    "wires": [["440e29182b3a25eb"], ["f436f22a608a5dce"]]
  },
  {
    "id": "cd046bbca44b1231",
    "type": "udp out",
    "z": "2323a58d30747a1f",
    "name": "UDP ‚Üí VenusE",
    "addr": "192.168.100.50",
    "iface": "",
    "port": "30000",
    "ipv": "udp4",
    "outport": "",
    "base64": false,
    "multicast": "false",
    "x": 1820,
    "y": 220,
    "wires": []
  },
  {
    "id": "2390873a5616ac49",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "src=soc, val=Number(payload) (safe)",
    "func": "const v = Number(msg.payload);\nif (Number.isNaN(v)) return null;\nmsg.src = 'soc';\nmsg.val = v;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 1360,
    "wires": [["bcedb2ae17cb9b1a"]]
  },
  {
    "id": "e94572df3cac2150",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "src=venus_grid, val=Number(payload) (safe)",
    "func": "const v = Number(msg.payload);\nif (Number.isNaN(v)) return null;\nmsg.src = 'venus_grid';\nmsg.val = v;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 790,
    "y": 1420,
    "wires": [["bcedb2ae17cb9b1a", "9c6da8e4d3b7610b"]]
  },
  {
    "id": "959fa15ef467bc36",
    "type": "comment",
    "z": "2323a58d30747a1f",
    "name": "Marstek Venus E - Datenerfassung",
    "info": "",
    "x": 340,
    "y": 1580,
    "wires": []
  },
  {
    "id": "e81cd44537bd38cc",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "VenusE stat/# (nur ausgew√§hlte Felder)",
    "topic": "marstek/venus_e/stat/#",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 390,
    "y": 1640,
    "wires": [["cd8134414c21ce94"]]
  },
  {
    "id": "0c54cdc2de66602b",
    "type": "influxdb out",
    "z": "2323a58d30747a1f",
    "influxdb": "57c7572eb86c50c7",
    "name": "NodeRed DB - Energiespeicher",
    "measurement": "energiespeicher",
    "precision": "ms",
    "retentionPolicy": "",
    "database": "nodered",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "",
    "bucket": "",
    "x": 1870,
    "y": 1640,
    "wires": []
  },
  {
    "id": "cd8134414c21ce94",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "‚Üí Influx: Feldnamen direkt aus Topics",
    "func": "const ALLOWED = new Set([\n  'bat_soc', 'em_ct_state', 'em_total_power', 'bat_temp_c', 'bat_capacity', 'rated_capacity',\n  'charg_flag', 'dischrg_flag', 'ongrid_power', 'offgrid_power', 'es_bat_soc', 'fw_ver'\n]);\nconst leaf = String(msg.topic || '').split('/').pop();\nif (!ALLOWED.has(leaf)) return null;\nlet val = msg.payload;\nif (leaf === 'charg_flag' || leaf === 'dischrg_flag') {\n  if (typeof val === 'boolean') val = val ? 1 : 0;\n  else {\n    const s = String(val).trim().toLowerCase();\n    if (['true','on','1'].includes(s)) val = 1;\n    else if (['false','off','0'].includes(s)) val = 0;\n    else val = Number(s);\n  }\n} else {\n  const n = Number(val);\n  if (Number.isFinite(n)) val = n; else {\n    const n2 = Number(String(val).replace(/[^-\\d.]/g, ''));\n    if (!Number.isFinite(n2)) return null;\n    val = n2;\n  }\n}\nmsg.payload = {};\nmsg.payload[leaf] = val;\nmsg.tags = { device_id: 'marstek_venus_e_v3_UDP' };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 1640,
    "wires": [["0c54cdc2de66602b"]]
  },
  {
    "id": "4d2758ad4fcbe3f7",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "TEST: Shelly Einspeisung ‚àí300 W",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "shellypro3em-sab7-netz/status/em:0",
    "payload": "{\"total_act_power\": -300}",
    "payloadType": "json",
    "x": 380,
    "y": 1300,
    "wires": [["744d0157cff4bc96"]]
  },
  {
    "id": "31aebc4591d2b2f5",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "stat/mode",
    "topic": "marstek/venus_e/stat/mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 300,
    "y": 1900,
    "wires": [["ed1e05389d3a0e62"]]
  },
  {
    "id": "88a8bba1ed0b4bb0",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "cmnd/mode",
    "topic": "marstek/venus_e/cmnd/mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 310,
    "y": 1960,
    "wires": [["ed1e05389d3a0e62"]]
  },
  {
    "id": "a540edf81065b727",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "stat/storage_info",
    "topic": "marstek/venus_e/stat/storage_info",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 320,
    "y": 2020,
    "wires": [["ed1e05389d3a0e62"]]
  },
  {
    "id": "179d5fa7a7e579f3",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "winter_mode",
    "topic": "marstek/winter/stat/winter_mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 310,
    "y": 2080,
    "wires": [["ed1e05389d3a0e62"]]
  },
  {
    "id": "ed1e05389d3a0e62",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Status‚ÜíLog (to marstek.log)",
    "func": "const TOPIC_MODE_STAT   = 'marstek/venus_e/stat/mode';\nconst TOPIC_MODE_CMND   = 'marstek/venus_e/cmnd/mode';\nconst TOPIC_STORAGE_INFO= 'marstek/venus_e/stat/storage_info';\nconst TOPIC_WINTER_STAT = 'marstek/winter/stat/winter_mode';\nconst now = Date.now();\nconst tISO = () => new Date().toISOString();\nfunction line(s){ return { payload: `[${tISO()}] ${s}` }; }\nconst topic = String(msg.topic || '');\nconst payloadStr = String(msg.payload ?? '').trim();\nswitch (topic) {\n  case TOPIC_MODE_STAT: {\n    const newMode = payloadStr || '‚Äî';\n    const lastMode = flow.get('log_last_mode');\n    if (lastMode === undefined) {\n      flow.set('log_last_mode', newMode);\n      return line(`MODE init: ${newMode}`);\n    }\n    if (newMode !== lastMode) {\n      const lastCmd = flow.get('log_last_cmd') || null;\n      let reason = '';\n      if (lastCmd && (now - lastCmd.t) <= 5000) reason = ` (cause=cmd:${lastCmd.mode})`;\n      flow.set('log_last_mode', newMode);\n      return line(`MODE: ${lastMode} -> ${newMode}${reason}`);\n    }\n    return null;\n  }\n  case TOPIC_MODE_CMND: {\n    flow.set('log_last_cmd', { mode: payloadStr || '‚Äî', t: now });\n    return line(`CMD: request ${payloadStr || '‚Äî'}`);\n  }\n  case TOPIC_STORAGE_INFO: {\n    return line(`STORAGE: ${payloadStr || '‚Äî'}`);\n  }\n  case TOPIC_WINTER_STAT: {\n    const newState = (payloadStr.toUpperCase()==='ON') ? 'ON' : 'OFF';\n    const lastState = flow.get('log_last_winter');\n    if (lastState === undefined) {\n      flow.set('log_last_winter', newState);\n      return line(`WINTER init: ${newState}`);\n    }\n    if (newState !== lastState) {\n      flow.set('log_last_winter', newState);\n      return line(`WINTER: ${lastState} -> ${newState}`);\n    }\n    return null;\n  }\n  default:\n    return null;\n}\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 2080,
    "wires": [["0a9a4d91bcf5abfb"]]
  },
  {
    "id": "0a9a4d91bcf5abfb",
    "type": "file",
    "z": "2323a58d30747a1f",
    "name": "marstek.log",
    "filename": "/data/logs/marstek.log",
    "filenameType": "str",
    "appendNewline": true,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "none",
    "x": 1820,
    "y": 2080,
    "wires": [[]]
  },
  {
    "id": "e2fa69c32dbbb419",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "Trim alle 10 min",
    "props": [],
    "repeat": "600",
    "crontab": "",
    "once": true,
    "onceDelay": "5",
    "topic": "",
    "x": 330,
    "y": 1760,
    "wires": [["0f0e9dccb31d1923"]]
  },
  {
    "id": "0f0e9dccb31d1923",
    "type": "file in",
    "z": "2323a58d30747a1f",
    "name": "read marstek.log",
    "filename": "/data/logs/marstek.log",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "x": 710,
    "y": 1760,
    "wires": [["74d171385c1538eb"]]
  },
  {
    "id": "74d171385c1538eb",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "FIFO: letzte 1000 Zeilen behalten",
    "func": "const MAX = 1000;\nconst text = typeof msg.payload === 'string' ? msg.payload : '';\nif (!text) return null;\nconst lines = text.split(/\\r?\\n/).filter(l => l.trim() !== '');\nif (lines.length <= MAX) return null;\nconst trimmed = lines.slice(-MAX).join('\\n') + '\\n';\nmsg.payload = trimmed;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1000,
    "y": 1760,
    "wires": [["868baf74c19ae646"]]
  },
  {
    "id": "868baf74c19ae646",
    "type": "file",
    "z": "2323a58d30747a1f",
    "name": "overwrite ‚Üí marstek.log (FIFO)",
    "filename": "/data/logs/marstek.log",
    "filenameType": "str",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "none",
    "x": 1870,
    "y": 1760,
    "wires": [[]]
  },
  {
    "id": "420b9593c07b7fc7",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "Poll every 2s",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "2",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 320,
    "y": 300,
    "wires": [["fb93e8809de278a9"]]
  },
  {
    "id": "fb93e8809de278a9",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Build UDP queries (IDs fixed)",
    "func": "const reqs = [\n  { id:100, method:\"Marstek.GetDevice\", params:{ ble_mac:\"0\" } },\n  { id:101, method:\"Wifi.GetStatus\",    params:{ id:0 } },\n  { id:102, method:\"BLE.GetStatus\",     params:{ id:0 } },\n  { id:103, method:\"Bat.GetStatus\",     params:{ id:0 } },\n  { id:104, method:\"ES.GetMode\",        params:{ id:0 } },\n  { id:105, method:\"EM.GetStatus\",      params:{ id:0 } }\n];\nlet out = [];\nfor (const r of reqs){\n  out.push({\n    payload: Buffer.from(JSON.stringify({id:r.id, method:r.method, params:r.params}), 'utf8'),\n    topic: r.method\n  });\n}\nreturn [out];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 940,
    "y": 300,
    "wires": [["82cd8fd8b98bb7dd"]]
  },
  {
    "id": "eb14eb2e1b2fc555",
    "type": "mqtt out",
    "z": "2323a58d30747a1f",
    "name": "MQTT publish",
    "topic": "",
    "qos": "",
    "retain": "",
    "respTopic": "",
    "contentType": "",
    "userProps": "",
    "correl": "",
    "expiry": "",
    "broker": "22f544be.780a3c",
    "x": 1820,
    "y": 720,
    "wires": []
  },
  {
    "id": "1fe90c878ac28db5",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "cmd: mode select",
    "topic": "marstek/venus_e/cmnd/mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 320,
    "y": 480,
    "wires": [["a04bbb95cf52c6e4"]]
  },
  {
    "id": "a04bbb95cf52c6e4",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Build ES.SetMode + cancel storage + Manual0 (2 out + optimistic)",
    "func": "let raw = String(msg.payload ?? \"\").trim();\nconst up = raw.toUpperCase();\nif (up === \"ON\" || up === \"AUTO\") raw = \"Auto\";\nelse if (up === \"OFF\" || up === \"PASSIVE\" || up === \"STANDBY\") raw = \"Passive\";\nif (up === \"MANUAL0\" || up === \"STOP\" || up === \"0W\") raw = \"Manual0\";\nconst wantedMode = raw;\nfunction buildModeCmd(which) {\n    if (which === \"Manual0\") {\n        return {\n            id: 912,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"Manual\",\n                    manual_cfg: {\n                        time_num: 1,\n                        start_time: \"00:00\",\n                        end_time: \"23:59\",\n                        week_set: 127,\n                        power: 0,\n                        enable: 1\n                    }\n                }\n            }\n        };\n    }\n    if (which === \"Manual\") {\n        return {\n            id: 312,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"Manual\",\n                    manual_cfg: {\n                        time_num: 1,\n                        start_time: \"00:00\",\n                        end_time: \"23:59\",\n                        week_set: 127,\n                        power: -500,\n                        enable: 1\n                    }\n                }\n            }\n        };\n    }\n    if (which === \"Auto\") {\n        return {\n            id: 813,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"Auto\",\n                    auto_cfg: { enable: 1 }\n                }\n            }\n        };\n    }\n    if (which === \"AI\") {\n        return {\n            id: 311,\n            method: \"ES.SetMode\",\n            params: {\n                id: 0,\n                config: {\n                    mode: \"AI\",\n                    ai_cfg: { enable: 1 }\n                }\n            }\n        };\n    }\n    return {\n        id: 814,\n        method: \"ES.SetMode\",\n        params: {\n            id: 0,\n            config: {\n                mode: \"Passive\",\n                passive_cfg: {\n                    power: 0,\n                    cd_time: 300\n                }\n            }\n        }\n    };\n}\nconst cmd = buildModeCmd(wantedMode);\nconst udpOutMsg = {\n    payload: Buffer.from(JSON.stringify(cmd), \"utf8\")\n};\nconst mqttOutArr = [];\nlet optimisticModeForMqtt;\nif (wantedMode === \"Manual0\") {\n    optimisticModeForMqtt = \"Manual\";\n} else {\n    optimisticModeForMqtt = wantedMode;\n}\nif (wantedMode === \"Manual0\") {\n    flow.set(\"storage_active\", false);\n    mqttOutArr.push({\n        topic: \"marstek/venus_e/stat/storage_info\",\n        payload: `storage:abort via Manual0`\n    });\n}\nmqttOutArr.push({\n    topic: \"marstek/venus_e/stat/mode\",\n    payload: optimisticModeForMqtt\n});\nmqttOutArr.push({\n    topic: \"marstek/venus_e/stat/watchdog_event\",\n    payload: `[${new Date().toISOString()}] CMD: request ${wantedMode}`\n});\nsetTimeout(() => {\n    const getCmd = {\n        id: 320,\n        method: \"ES.GetMode\",\n        params: { id: 0 }\n    };\n    const udpGet = {\n        payload: Buffer.from(JSON.stringify(getCmd), \"utf8\")\n    };\n    node.send([[udpGet], null]);\n}, 400);\nreturn [\n    [udpOutMsg],\n    mqttOutArr\n];",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1060,
    "y": 480,
    "wires": [["82cd8fd8b98bb7dd"], ["eb14eb2e1b2fc555"]]
  },
  {
    "id": "f1ea34dee1ba75fd",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "cmd: storage (Button)",
    "topic": "marstek/storage/cmnd/enable",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 340,
    "y": 540,
    "wires": [["a44b197f59436b03"]]
  },
  {
    "id": "3f9d7020d4baf5d5",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "listen: bat_soc",
    "topic": "marstek/venus_e/stat/bat_soc",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 310,
    "y": 600,
    "wires": [["0ec8eee2102c62b8"]]
  },
  {
    "id": "4eb63b8f510eb6ee",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "listen: es_bat_soc (zus√§tzlich)",
    "topic": "marstek/venus_e/stat/es_bat_soc",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 360,
    "y": 660,
    "wires": [["0ec8eee2102c62b8"]]
  },
  {
    "id": "9a80071861055d84",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "listen: mode ‚Üí Lagerung abbrechen",
    "topic": "marstek/venus_e/stat/mode",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 380,
    "y": 720,
    "wires": [["29ec6d2b2179c3ed", "84fdc643b39d1f50"]]
  },
  {
    "id": "29ec6d2b2179c3ed",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Abbruch wenn Mode ‚â† Manual",
    "func": "const POWER_PRE_GRACE_W   = -500;\nconst POWER_GRACE_HOLD_W  = -250;\nfunction mqttMsg(topic, payload){\n    return { topic, payload };\n}\nfunction buildManualCmd(powerW){\n    return {\n        id: 910,\n        method: \"ES.SetMode\",\n        params: {\n            id: 0,\n            config: {\n                mode: \"Manual\",\n                manual_cfg: {\n                    time_num: 1,\n                    start_time: \"00:00\",\n                    end_time: \"23:59\",\n                    week_set: 127,\n                    power: powerW,\n                    enable: 1\n                }\n            }\n        }\n    };\n}\nfunction setStatus(fill, shape, text){\n    node.status({ fill, shape, text });\n}\nconst modeRaw   = String(msg.payload || \"\").trim();\nconst modeLower = modeRaw.toLowerCase();\nconst now                = Date.now();\nlet   storageActive      = flow.get(\"storage_active\")      || false;\nlet   graceUntil         = flow.get(\"storage_grace_until\") || 0;\nconst graceMode250       = flow.get(\"storage_grace_mode250\") || false;\nconst targetSoc          = flow.get(\"storage_target\")      || \"?\";\nlet udpOutArr  = [];\nlet mqttOutArr = [];\nif (!storageActive && !graceUntil){\n    setStatus(\"grey\", \"ring\", `idle (mode=${modeRaw})`);\n    return null;\n}\nconst inGrace = (graceUntil && now < graceUntil);\nconst graceFinished = (graceUntil && now >= graceUntil);\nif (graceFinished){\n    flow.set(\"storage_grace_until\", 0);\n    flow.set(\"storage_grace_mode250\", false);\n    flow.set(\"storage_active\", false);\n    mqttOutArr.push(\n        mqttMsg(\"marstek/venus_e/stat/storage_info\",\n                `storage:done target=${targetSoc}% grace-finished`),\n        mqttMsg(\"marstek/storage/stat/enable\",\"OFF\"),\n        mqttMsg(\"marstek/venus_e/stat/mode\",\"Passive\")\n    );\n    setStatus(\"grey\",\"dot\",\"Lagerung fertig (Grace zu Ende)\");\n    return [\n        udpOutArr.length ? udpOutArr : null,\n        mqttOutArr.length ? mqttOutArr : null\n    ];\n}\nif (inGrace){\n    const secLeft = Math.round((graceUntil - now)/1000);\n    if (modeLower === \"manual\"){\n        setStatus(\"blue\",\"dot\",`Grace l√§uft ${secLeft}s (-250W hold)`);\n        mqttOutArr.push(\n            mqttMsg(\"marstek/venus_e/stat/storage_info\",\n                    `storage:grace-hold mode=${modeRaw} t_left=${secLeft}s`)\n        );\n        return [\n            udpOutArr.length ? udpOutArr : null,\n            mqttOutArr.length ? mqttOutArr : null\n        ];\n    } else {\n        const cmdManual250 = buildManualCmd(POWER_GRACE_HOLD_W);\n        udpOutArr.push({\n            payload: Buffer.from(JSON.stringify(cmdManual250),\"utf8\")\n        });\n        mqttOutArr.push(\n            mqttMsg(\"marstek/venus_e/stat/storage_info\",\n                    `storage:grace-reassert -> Manual(${POWER_GRACE_HOLD_W}W) from ${modeRaw} t_left=${secLeft}s`),\n            mqttMsg(\"marstek/venus_e/stat/mode\",\"Manual\")\n        );\n        setStatus(\"blue\",\"ring\",`Grace reassert (-250W) ${secLeft}s left`);\n        return [\n            udpOutArr.length ? udpOutArr : null,\n            mqttOutArr.length ? mqttOutArr : null\n        ];\n    }\n}\nif (storageActive && !inGrace){\n    if (modeLower === \"manual\"){\n        setStatus(\"green\",\"dot\",`Lagerung aktiv (<target ${targetSoc}%)`);\n        return null;\n    } else {\n        const cmdManual500 = buildManualCmd(POWER_PRE_GRACE_W);\n        udpOutArr.push({\n            payload: Buffer.from(JSON.stringify(cmdManual500),\"utf8\")\n        });\n        mqttOutArr.push(\n            mqttMsg(\"marstek/venus_e/stat/storage_info\",\n                    `storage:reassert-pregrace -> Manual(${POWER_PRE_GRACE_W}W) from ${modeRaw}`),\n            mqttMsg(\"marstek/venus_e/stat/mode\",\"Manual\")\n        );\n        setStatus(\"green\",\"ring\",\"pre-grace reassert -500W\");\n        return [\n            udpOutArr.length ? udpOutArr : null,\n            mqttOutArr.length ? mqttOutArr : null\n        ];\n    }\n}\nsetStatus(\"grey\",\"ring\",\"no-op\");\nreturn null;",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 720,
    "wires": [["82cd8fd8b98bb7dd"], ["eb14eb2e1b2fc555"]]
  },
  {
    "id": "84fdc643b39d1f50",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "cache mode in flow",
    "func": "flow.set('mode', String(msg.payload || '').trim());\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 660,
    "wires": [[]]
  },
  {
    "id": "e5740d2a03aecce6",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "cache vgrid in flow",
    "func": "const n = Number(msg.payload);\nif (!Number.isNaN(n)) {\n    flow.set('vgrid', n);\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 840,
    "wires": [[]]
  },
  {
    "id": "f75f084078fadfb9",
    "type": "mqtt in",
    "z": "2323a58d30747a1f",
    "name": "listen: ongrid_power ‚Üí cache vgrid",
    "topic": "marstek/venus_e/stat/ongrid_power",
    "qos": "0",
    "datatype": "auto",
    "broker": "22f544be.780a3c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 380,
    "y": 840,
    "wires": [["e5740d2a03aecce6"]]
  },
  {
    "id": "ad0f6e6be66a0a2c",
    "type": "link in",
    "z": "2323a58d30747a1f",
    "name": "link in 1",
    "links": ["440e29182b3a25eb", "82cd8fd8b98bb7dd"],
    "x": 1695,
    "y": 220,
    "wires": [["cd046bbca44b1231"]]
  },
  {
    "id": "440e29182b3a25eb",
    "type": "link out",
    "z": "2323a58d30747a1f",
    "name": "link out 11",
    "mode": "link",
    "links": ["ad0f6e6be66a0a2c"],
    "x": 1755,
    "y": 1060,
    "wires": []
  },
  {
    "id": "82cd8fd8b98bb7dd",
    "type": "link out",
    "z": "2323a58d30747a1f",
    "name": "link out 12",
    "mode": "link",
    "links": ["ad0f6e6be66a0a2c"],
    "x": 1755,
    "y": 420,
    "wires": []
  },
  {
    "id": "5d8137bf164324ad",
    "type": "inject",
    "z": "2323a58d30747a1f",
    "name": "alle 10s pr√ºfen",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "10",
    "once": true,
    "onceDelay": "5",
    "topic": "",
    "payloadType": "date",
    "x": 320,
    "y": 780,
    "wires": [["dd2c3f363866bdb2"]]
  },
  {
    "id": "dd2c3f363866bdb2",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Watchdog: Passive pr√ºfen + UDP Manual0‚ÜíPassive Reset + MQTT + Log (v2.5)",
    "func": "const MAX_PASSIVE_TIME_MS = 60000;\nconst VGRID_MIN_W = 50;\nconst VGRID_MAX_W = 250;\nconst COOLDOWN_MS = 180000;\nconst RESET_DELAY_MS = 10000;\nlet mode      = flow.get('mode');\nlet vgrid     = flow.get('vgrid');\nlet enteredAt = flow.get('wd_last_passive') || 0;\nlet lastFix   = flow.get('wd_last_fix') || 0;\nconst now     = Date.now();\nnode.status({\n    fill: 'grey',\n    shape: 'dot',\n    text: `mode=${mode || '‚Äî'} | vgrid=${(vgrid !== undefined) ? vgrid : '‚Äî'}`\n});\nif (mode === 'Passive') {\n    if (!enteredAt) {\n        enteredAt = now;\n        flow.set('wd_last_passive', enteredAt);\n    }\n} else {\n    if (enteredAt) {\n        flow.set('wd_last_passive', 0);\n    }\n    return null;\n}\nconst passiveDuration = now - enteredAt;\nconst cooldownOK      = (now - lastFix) >= COOLDOWN_MS;\nconst looksWrong = (\n    typeof vgrid === 'number' &&\n    vgrid >= VGRID_MIN_W &&\n    vgrid <= VGRID_MAX_W\n);\nconst longEnough = passiveDuration >= MAX_PASSIVE_TIME_MS;\nif (looksWrong && longEnough && cooldownOK) {\n    function buildModeCmd(which) {\n        if (which === 'Manual0') {\n            return {\n                id: 912,\n                method: 'ES.SetMode',\n                params: {\n                    id: 0,\n                    config: {\n                        mode: 'Manual',\n                        manual_cfg: {\n                            time_num: 1,\n                            start_time: '00:00',\n                            end_time: '23:59',\n                            week_set: 127,\n                            power: 0,\n                            enable: 1\n                        }\n                    }\n                }\n            };\n        }\n        return {\n            id: 913,\n            method: 'ES.SetMode',\n            params: {\n                id: 0,\n                config: {\n                    mode: 'Passive',\n                    passive_cfg: {\n                        power: 0,\n                        cd_time: 300\n                    }\n                }\n            }\n        };\n    }\n    const udpManual0 = {\n        payload: Buffer.from(JSON.stringify(buildModeCmd('Manual0')), 'utf8')\n    };\n    const udpPassive = {\n        payload: Buffer.from(JSON.stringify(buildModeCmd('Passive')), 'utf8')\n    };\n    const eventText = `WATCHDOG: Forced UDP Manual0‚ÜíPassive reset (vgrid=${Math.round(vgrid)}W after ${(passiveDuration/1000).toFixed(1)}s Passive)`;\n    const logLine   = `[${new Date().toISOString()}] ${eventText}`;\n    const mqttMsgNow = {\n        topic: 'marstek/venus_e/stat/watchdog_event',\n        payload: logLine\n    };\n    const fileMsgNow = {\n        payload: logLine\n    };\n    flow.set('wd_last_fix', now);\n    node.status({\n        fill: 'yellow',\n        shape: 'ring',\n        text: `Manual0 jetzt, Passive in 10s (${Math.round(vgrid)}W)`\n    });\n    node.send([[udpManual0], [mqttMsgNow], [fileMsgNow]]);\n    setTimeout(() => {\n        const mqttMsgLater = {\n            topic: 'marstek/venus_e/stat/watchdog_event',\n            payload: `[${new Date().toISOString()}] WATCHDOG: switched back to Passive after Manual0 hold`\n        };\n        node.send([[udpPassive], [mqttMsgLater], null]);\n    }, RESET_DELAY_MS);\n    return null;\n}\nreturn null;",
    "outputs": 3,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1110,
    "y": 780,
    "wires": [["82cd8fd8b98bb7dd"], ["eb14eb2e1b2fc555"], ["4c3a0daf83b2177d"]]
  },
  {
    "id": "a44b197f59436b03",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Start Lagerung: Manual ‚Üí Ziel 50 %",
    "func": "const wantRaw = String(msg.payload || '').trim().toUpperCase();\nconst wantOn = (wantRaw === 'ON');\nconst TARGET_SOC       = 50;\nconst FAST_POWER_W     = -500;\nfunction buildSetModeManual(powerW) {\n    return {\n        id: 700,\n        method: 'ES.SetMode',\n        params: {\n            id: 0,\n            config: {\n                mode: 'Manual',\n                manual_cfg: {\n                    time_num: 1,\n                    start_time: '00:00',\n                    end_time: '23:59',\n                    week_set: 127,\n                    power: powerW,\n                    enable: 1\n                }\n            }\n        }\n    };\n}\nfunction buildSetModeManual0() {\n    return buildSetModeManual(0);\n}\nfunction buildSetModePassive() {\n    return {\n        id: 913,\n        method: 'ES.SetMode',\n        params: {\n            id: 0,\n            config: {\n                mode: 'Passive',\n                passive_cfg: {\n                    power: 0,\n                    cd_time: 300\n                }\n            }\n        }\n    };\n}\nconst udpArr = [];\nconst mqttArr = [];\nfunction pushEnableState(onBool){\n    mqttArr.push({\n        topic:'marstek/storage/stat/enable',\n        payload:onBool ? 'ON':'OFF'\n    });\n}\nfunction pushStorageInfo(txt){\n    mqttArr.push({\n        topic:'marstek/venus_e/stat/storage_info',\n        payload:txt\n    });\n}\nfunction pushModeOptimistic(mode){\n    mqttArr.push({\n        topic:'marstek/venus_e/stat/mode',\n        payload:mode\n    });\n}\nif (wantOn) {\n    flow.set('storage_active', true);\n    flow.set('storage_target', TARGET_SOC);\n    flow.set('storage_grace_until', 0);\n    flow.set('storage_grace_mode250', false);\n    node.status({\n        fill:'green',\n        shape:'dot',\n        text:`Lagerung aktiv (Ziel ${TARGET_SOC}%)`\n    });\n    const cmdManualFast = buildSetModeManual(FAST_POWER_W);\n    udpArr.push({\n        payload:Buffer.from(JSON.stringify(cmdManualFast),'utf8')\n    });\n    pushStorageInfo(`storage:start target=${TARGET_SOC}% power=${FAST_POWER_W}W`);\n    pushModeOptimistic('Manual');\n    pushEnableState(true);\n} else {\n    flow.set('storage_active', false);\n    flow.set('storage_grace_until', 0);\n    flow.set('storage_grace_mode250', false);\n    node.status({\n        fill:'grey',\n        shape:'ring',\n        text:'Lagerung aus'\n    });\n    const cmdManual0 = buildSetModeManual0();\n    udpArr.push({\n        payload:Buffer.from(JSON.stringify(cmdManual0),'utf8')\n    });\n    pushStorageInfo('storage:abort via switch OFF');\n    pushModeOptimistic('Passive');\n    pushEnableState(false);\n    setTimeout(()=>{\n        const cmdPassive = buildSetModePassive();\n        node.send([\n            [{payload:Buffer.from(JSON.stringify(cmdPassive),'utf8')}],\n            [{topic:'marstek/venus_e/stat/mode',payload:'Passive'}]\n        ]);\n    },1000);\n}\nsetTimeout(()=>{\n    const getCmd = {\n        id:320,\n        method:'ES.GetMode',\n        params:{id:0}\n    };\n    node.send([\n        [{payload:Buffer.from(JSON.stringify(getCmd),'utf8')}],\n        null\n    ]);\n},400);\nreturn [udpArr,mqttArr];",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 970,
    "y": 540,
    "wires": [["82cd8fd8b98bb7dd"], ["eb14eb2e1b2fc555"]]
  },
  {
    "id": "0ec8eee2102c62b8",
    "type": "function",
    "z": "2323a58d30747a1f",
    "name": "Watcher: bei ‚â•50 % ‚Üí Passive",
    "func": "const graceDurationMs   = 5 * 60 * 1000;\nconst HOLD_POWER_W      = -250;\nconst FINAL_MODE        = 'Passive';\nfunction buildManual(powerW) {\n    return {\n        id: 800,\n        method: 'ES.SetMode',\n        params: {\n            id: 0,\n            config: {\n                mode: 'Manual',\n                manual_cfg: {\n                    time_num: 1,\n                    start_time: '00:00',\n                    end_time: '23:59',\n                    week_set: 127,\n                    power: powerW,\n                    enable: 1\n                }\n            }\n        }\n    };\n}\nfunction buildPassiveCmd() {\n    return {\n        id: 801,\n        method: 'ES.SetMode',\n        params: {\n            id: 0,\n            config: {\n                mode: 'Passive',\n                passive_cfg: {\n                    power: 0,\n                    cd_time: 300\n                }\n            }\n        }\n    };\n}\nconst socNow = Number(msg.payload);\nif (Number.isNaN(socNow)) return null;\nconst active           = flow.get('storage_active')        || false;\nconst target           = flow.get('storage_target')        || 50;\nlet   graceUntil       = flow.get('storage_grace_until')   || 0;\nlet   graceMode250     = flow.get('storage_grace_mode250') || false;\nconst now              = Date.now();\nif (!active) {\n    return null;\n}\nconst mqttMsgs = [];\nconst udpMsgs  = [];\nif (!graceUntil && socNow >= target) {\n    graceUntil   = now + graceDurationMs;\n    graceMode250 = true;\n    flow.set('storage_grace_until',   graceUntil);\n    flow.set('storage_grace_mode250', graceMode250);\n    node.status({\n        fill: 'yellow',\n        shape: 'dot',\n        text: `Nachlauf aktiv @${socNow}% (bis ${new Date(graceUntil).toLocaleTimeString()})`\n    });\n    const cmdManualHold = buildManual(HOLD_POWER_W);\n    udpMsgs.push({\n        payload: Buffer.from(JSON.stringify(cmdManualHold),'utf8')\n    });\n    mqttMsgs.push({\n        topic: 'marstek/venus_e/stat/storage_info',\n        payload: `storage:grace-start soc=${socNow}% target=${target}% holdUntil=${graceUntil} holdPower=${HOLD_POWER_W}W`\n    });\n    mqttMsgs.push({\n        topic: 'marstek/venus_e/stat/mode',\n        payload: 'Manual'\n    });\n    return [udpMsgs, mqttMsgs];\n}\nconst graceRunning   = (!!graceUntil && now < graceUntil);\nconst graceExpired   = (!!graceUntil && now >= graceUntil);\nconst socHighEnough  = (socNow >= (target + 1));\nif (graceRunning) {\n    const cmdManualHold = buildManual(HOLD_POWER_W);\n    udpMsgs.push({\n        payload: Buffer.from(JSON.stringify(cmdManualHold),'utf8')\n    });\n    mqttMsgs.push({\n        topic: 'marstek/venus_e/stat/storage_info',\n        payload: `storage:grace-hold soc=${socNow}% mode=Manual holdPower=${HOLD_POWER_W}W until=${graceUntil}`\n    });\n    node.status({\n        fill: 'yellow',\n        shape: 'ring',\n        text: `Grace h√§lt @${socNow}% bis ${new Date(graceUntil).toLocaleTimeString()} (-250W)`\n    });\n    return [udpMsgs, mqttMsgs];\n}\nif (graceExpired || socHighEnough) {\n    flow.set('storage_active', false);\n    flow.set('storage_grace_until', 0);\n    flow.set('storage_grace_mode250', false);\n    node.status({\n        fill: 'blue',\n        shape: 'dot',\n        text: `Ziel erreicht (${socNow}%) ‚Üí Passive`\n    });\n    const cmdPassive = buildPassiveCmd();\n    udpMsgs.push({\n        payload: Buffer.from(JSON.stringify(cmdPassive),'utf8')\n    });\n    mqttMsgs.push(\n        {\n            topic: 'marstek/venus_e/stat/storage_info',\n            payload: `storage:done soc=${socNow}% -> Passive (grace end)`\n        },\n        {\n            topic: 'marstek/venus_e/stat/mode',\n            payload: FINAL_MODE\n        },\n        {\n            topic: 'marstek/storage/stat/enable',\n            payload: 'OFF'\n        }\n    );\n    return [udpMsgs, mqttMsgs];\n}\nreturn null;",
    "outputs": 2,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 600,
    "wires": [["82cd8fd8b98bb7dd"], ["eb14eb2e1b2fc555"]]
  },
  {
    "id": "522a6073a4de3aa9",
    "type": "link out",
    "z": "2323a58d30747a1f",
    "name": "link out 14",
    "mode": "link",
    "links": ["b0a5093f43411d49"],
    "x": 535,
    "y": 200,
    "wires": []
  },
  {
    "id": "b0a5093f43411d49",
    "type": "link in",
    "z": "2323a58d30747a1f",
    "name": "link in 2",
    "links": ["522a6073a4de3aa9"],
    "x": 255,
    "y": 360,
    "wires": [["413441b26fcbd76b"]]
  },
  {
    "id": "c306c93706c41414",
    "type": "link in",
    "z": "2323a58d30747a1f",
    "name": "send -> marstek.log",
    "links": ["2a278b0892f5d734", "4c3a0daf83b2177d"],
    "x": 255,
    "y": 1860,
    "wires": [["0a9a4d91bcf5abfb"]]
  },
  {
    "id": "2a278b0892f5d734",
    "type": "link out",
    "z": "2323a58d30747a1f",
    "name": "send -> marstek.log",
    "mode": "link",
    "links": ["c306c93706c41414"],
    "x": 1755,
    "y": 1260,
    "wires": []
  },
  {
    "id": "4c3a0daf83b2177d",
    "type": "link out",
    "z": "2323a58d30747a1f",
    "name": "send -> marstek.log",
    "mode": "link",
    "links": ["c306c93706c41414"],
    "x": 1755,
    "y": 800,
    "wires": []
  },
  {
    "id": "22f544be.780a3c",
    "type": "mqtt-broker",
    "name": "HomeAssistant-MQTT",
    "broker": "mqtt.local",
    "port": "1883",
    "clientid": "NodeRedPublic",
    "autoConnect": true,
    "usetls": false,
    "compatmode": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "autoUnsubscribe": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "57c7572eb86c50c7",
    "type": "influxdb",
    "hostname": "influxdb",
    "port": "8086",
    "protocol": "http",
    "database": "nodered",
    "name": "NodeRed DB",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "1.x",
    "url": "http://localhost:8086",
    "timeout": "",
    "rejectUnauthorized": true
  }
]
